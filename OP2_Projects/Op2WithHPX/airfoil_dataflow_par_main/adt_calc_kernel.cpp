//
// auto-generated by op2.py
//

//user function
#include "adt_calc.h"
#include <vector>
#include <hpx/hpx_init.hpp>
#include <hpx/hpx.hpp>
#include <hpx/include/parallel_algorithm.hpp>
#include <hpx/include/parallel_executor_parameters.hpp>
#include <hpx/include/iostreams.hpp>

// host stub function
hpx::future<void> op_par_loop_adt_calc(char const * name, hpx::future<op_set> set,
  hpx::future<op_arg> arg0,
  hpx::future<op_arg> arg1,
  hpx::future<op_arg> arg2,
  hpx::future<op_arg> arg3,
  hpx::future<op_arg> arg4,
  hpx::future<op_arg> arg5){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0.get();
  args[1] = arg1.get();
  args[2] = arg2.get();
  args[3] = arg3.get();
  args[4] = arg4.get();
  args[5] = arg5.get();
  op_set s=set.get();

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(1);
  op_timers_core(&cpu_t1, &wall_t1);

  int  ninds   = 1;
  int  inds[6] = {0,0,0,0,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: adt_calc\n");
  }

  // get plan
  #ifdef OP_PART_SIZE_1
    int part_size = OP_PART_SIZE_1;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(s, nargs, args);

  hpx::parallel::dynamic_chunk_size dcs(500);
  hpx::future<void> new_data;

  if (s->size >0) {

    op_plan *Plan = op_plan_get(name,s,part_size,nargs,args,ninds,inds);

    // execute plan
    int block_offset = 0;
 
    for ( int col=0; col<Plan->ncolors; col++ ){

     if (col==Plan->ncolors_core) {op_mpi_wait_all(nargs, args);}

     int nblocks = Plan->ncolblk[col];

      auto r=boost::irange(0, nblocks);
      new_data=hpx::parallel::for_each(hpx::parallel::par(hpx::parallel::task).with(dcs),r.begin(), r.end(),[args,Plan,block_offset](std::size_t blockIdx){
      int blockId  = Plan->blkmap[blockIdx + block_offset];
      int nelem    = Plan->nelems[blockId];
      int offset_b = Plan->offset[blockId];

      for ( int n=offset_b; n<offset_b+nelem; n++ ){
        int map0idx = args[0].map_data[n * args[0].map->dim + 0];
        int map1idx = args[0].map_data[n * args[0].map->dim + 1];
        int map2idx = args[0].map_data[n * args[0].map->dim + 2];
        int map3idx = args[0].map_data[n * args[0].map->dim + 3];

        adt_calc(
          &((double*)args[0].data)[2 * map0idx],
          &((double*)args[0].data)[2 * map1idx],
          &((double*)args[0].data)[2 * map2idx],
          &((double*)args[0].data)[2 * map3idx],
          &((double*)args[4].data)[4 * n],
          &((double*)args[5].data)[1 * n]);

   }
  });

   block_offset += nblocks;

    }

    OP_kernels[1].transfer  += Plan->transfer;
    OP_kernels[1].transfer2 += Plan->transfer2;

  }


  if (set_size == 0 || set_size == s->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;
  OP_kernels[1].time     += wall_t2 - wall_t1;

return new_data;

}

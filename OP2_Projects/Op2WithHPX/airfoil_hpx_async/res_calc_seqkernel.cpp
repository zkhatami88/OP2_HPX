//
// auto-generated by op2.py
//

//user function
#include "res_calc.h"
#include <vector>
#include <hpx/hpx_init.hpp>
#include <hpx/hpx.hpp>
#include <hpx/include/async.hpp>

// host stub function
void workres_calc(int offset_b, int nelem,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  for ( int n=offset_b; n<offset_b+nelem; n++ ){
    int map0idx = arg0.map_data[n * arg0.map->dim + 0];
    int map1idx = arg0.map_data[n * arg0.map->dim + 1];
    int map2idx = arg2.map_data[n * arg2.map->dim + 0];
    int map3idx = arg2.map_data[n * arg2.map->dim + 1];

    res_calc(
      &((double*)arg0.data)[2 * map0idx],
      &((double*)arg0.data)[2 * map1idx],
      &((double*)arg2.data)[4 * map2idx],
      &((double*)arg2.data)[4 * map3idx],
      &((double*)arg4.data)[1 * map2idx],
      &((double*)arg4.data)[1 * map3idx],
      &((double*)arg6.data)[4 * map2idx],
      &((double*)arg6.data)[4 * map3idx]);
  }
}

std::vector<hpx::future<void>> op_par_loop_res_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(2);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: res_calc\n");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
      for ( int n=0; n<set_size; n++ ){
        if (n==set->core_size) {
          op_mpi_wait_all(nargs, args);
        }
        new_data.push_back(hpx::async(workres_calc,offset_b,nelem,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
        arg5,
        arg6,
        arg7)

        );
      }
      );
    }
    );
  }
  );
}
);
}
);
}
);
}
);
}
for ( int n=0; n<set_size; n++ ){
res_calc(,,,,,,,);
}
}

if (set_size == 0 || set_size == set->core_size) {
op_mpi_wait_all(nargs, args);
}
// combine reduction data
op_mpi_set_dirtybit(nargs, args);

// update kernel record
op_timers_core(&cpu_t2, &wall_t2);
OP_kernels[2].name      = name;
OP_kernels[2].count    += 1;
OP_kernels[2].time     += wall_t2 - wall_t1;
return new_data;
}

//
// auto-generated by op2.py
//

//user function
#include "res_calc.h"
#include <vector>
#include <hpx/hpx_init.hpp>
#include <hpx/hpx.hpp>
#include <hpx/include/parallel_algorithm.hpp>
#include <hpx/include/parallel_executor_parameters.hpp>
#include <hpx/include/iostreams.hpp>

// host stub function
hpx::shared_future<op_dat> op_par_loop_res_calc(char const * name, op_set set,
  hpx::future<op_arg> arg0,
  hpx::future<op_arg> arg1,
  hpx::future<op_arg> arg2,
  hpx::future<op_arg> arg3,
  hpx::future<op_arg> arg4,
  hpx::future<op_arg> arg5,
  hpx::future<op_arg> arg6,
  hpx::future<op_arg> arg7){


  using hpx::lcos::local::dataflow;
  using hpx::util::unwrapped;

  return dataflow(hpx::launch::async,unwrapped([&name,set](op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3, op_arg arg4, op_arg arg5, op_arg arg6, op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  int  ninds   = 4;
  int  inds[8] = {0,0,1,1,2,2,3,3};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: res_calc\n");
  }

  // get plan
  #ifdef OP_PART_SIZE_2
    int part_size = OP_PART_SIZE_2;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  hpx::parallel::dynamic_chunk_size dcs(1024);

    op_plan *Plan=nullptr;
    int cl=0;

  if (set->size >0) {

    op_plan_get(Plan,name,set,part_size,nargs,args,ninds,inds,cl);   

    // execute plan
    int block_offset = 0;

    for ( int col=0; col<cl; col++ ){

      int nblocks = Plan->ncolblk[col];

      auto r=boost::irange(0, nblocks);
     hpx::parallel::for_each(hpx::parallel::par.with(dcs),r.begin(), r.end(),[args,&Plan,block_offset](std::size_t blockIdx){

      int blockId  = Plan->blkmap[blockIdx + block_offset];
      int nelem    = Plan->nelems[blockId];
      int offset_b = Plan->offset[blockId];

      for ( int n=offset_b; n<offset_b+nelem; n++ ){
        int map0idx = args[0].map_data[n * args[0].map->dim + 0];
        int map1idx = args[0].map_data[n * args[0].map->dim + 1];
        int map2idx = args[2].map_data[n * args[2].map->dim + 0];
        int map3idx = args[2].map_data[n * args[2].map->dim + 1];

        res_calc(
          &((double*)args[0].data)[2 * map0idx],
          &((double*)args[0].data)[2 * map1idx],
          &((double*)args[2].data)[4 * map2idx],
          &((double*)args[2].data)[4 * map3idx],
          &((double*)args[4].data)[1 * map2idx],
          &((double*)args[4].data)[1 * map3idx],
          &((double*)args[6].data)[4 * map2idx],
          &((double*)args[6].data)[4 * map3idx]);
  
    }

 });

      block_offset += nblocks;

    }
//    OP_kernels[2].transfer  += Plan->transfer;
//    OP_kernels[2].transfer2 += Plan->transfer2;


 }

 // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

return args[6].dat;
}),arg0,arg1,arg2,arg3,arg4,arg5,arg6,arg7);

}

//
// auto-generated by op2.py
//

//user function
#include "adt_calc.h"
#include <vector>
#include <hpx/hpx_init.hpp>
#include <hpx/hpx.hpp>
#include <hpx/include/parallel_algorithm.hpp>
#include <hpx/include/parallel_executor_parameters.hpp>
#include <hpx/include/iostreams.hpp>

// host stub function
hpx::future<void>  op_par_loop_adt_calc(char const *name, hpx::future<op_set> set,
  hpx::future<op_arg> arg0,
  hpx::future<op_arg> arg1,
  hpx::future<op_arg> arg2,
  hpx::future<op_arg> arg3,
  hpx::future<op_arg> arg4,
  hpx::future<op_arg> arg5){

   using hpx::lcos::local::dataflow;
   using hpx::util::unwrapped;

  return dataflow(unwrapped([&name](op_set set, op_arg arg0, op_arg arg1, op_arg arg2, op_arg arg3, op_arg arg4, op_arg arg5){

  std::vector<hpx::future<void>> new_data;

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(1);
  op_timers_core(&cpu_t1, &wall_t1);

  int  ninds   = 1;
  int  inds[6] = {0,0,0,0,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: adt_calc\n");
  }

  // get plan
  #ifdef OP_PART_SIZE_1
    int part_size = OP_PART_SIZE_1;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  hpx::parallel::dynamic_chunk_size dcs(500);
  if (set->size >0) {

//    op_plan *Plan = op_plan_get(name,set,part_size,nargs,args,ninds,inds);

    // execute plan
    int block_offset = 0;
    for ( int col=0; col<1; col++ ){

/*    
    for ( int col=0; col<Plan->ncolors; col++ ){

      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];
*/

      int nblocks=1450;
      auto r=boost::irange(0, nblocks);
//      for(int blockIdx=0; blockIdx<nblocks; ++blockIdx){
      hpx::parallel::for_each(hpx::parallel::par.with(dcs),r.begin(), r.end(),[&](std::size_t blockIdx){
//      int blockId  = Plan->blkmap[blockIdx + block_offset];
//      int nelem    = Plan->nelems[blockId];
//      int offset_b = Plan->offset[blockId];

 //     for ( int n=offset_b; n<offset_b+nelem; n++ ){
     for ( int n=0; n<555; n++ ){
        int map0idx = arg0.map_data[n * arg0.map->dim + 0];
        int map1idx = arg0.map_data[n * arg0.map->dim + 1];
        int map2idx = arg0.map_data[n * arg0.map->dim + 2];
        int map3idx = arg0.map_data[n * arg0.map->dim + 3];

        adt_calc(
          &((double*)arg0.data)[2 * map0idx],
          &((double*)arg0.data)[2 * map1idx],
          &((double*)arg0.data)[2 * map2idx],
          &((double*)arg0.data)[2 * map3idx],
          &((double*)arg4.data)[4 * n],
          &((double*)arg5.data)[1 * n]);
     }

      });

      block_offset += nblocks;
    }
//    OP_kernels[1].transfer  += Plan->transfer;
//    OP_kernels[1].transfer2 += Plan->transfer2;

  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[1].name      = name;
  OP_kernels[1].count    += 1;
  OP_kernels[1].time     += wall_t2 - wall_t1;

return new_data;
}),set,arg0,arg1,arg2,arg3,arg4,arg5);
}
